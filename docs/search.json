[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Francesco Edoardo Vallone. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Francesco Edoardo Vallone (2025). TranscripTools: Streamlined RNA-seq Data Manipulation Analysis. R package version 0.1.0.","code":"@Manual{,   title = {TranscripTools: Streamlined RNA-seq Data Manipulation and Analysis},   author = {{Francesco Edoardo Vallone}},   year = {2025},   note = {R package version 0.1.0}, }"},{"path":[]},{"path":"/index.html","id":"install-from-github","dir":"","previous_headings":"Installation","what":"Install from GitHub","title":"Streamlined RNA-seq Data Manipulation and Analysis","text":"install development version TranscripTools GitHub, run: #Install devtools needed (!requireNamespace(\"devtools\", quietly = TRUE)) install.packages(\"devtools\") #Install TranscripTools GitHub devtools::install_github(\"Francesco-E-Vallone/TranscripTools\") #Load package library(TranscripTools)","code":""},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Streamlined RNA-seq Data Manipulation and Analysis","text":"full package documentation examples, visit website: TranscripTools Documentation","code":""},{"path":"/reference/add_significance.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Significance Categories to Differential Expression Results — add_significance","title":"Add Significance Categories to Differential Expression Results — add_significance","text":"function adds significance category differential expression results data frame. significance determined using FDR (adjusted p-value) column log2 fold change column. default, genes FDR < 0.05 absolute logFC > 1 categorized \"\" (logFC > 1) \"\" (logFC < -1).","code":""},{"path":"/reference/add_significance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Significance Categories to Differential Expression Results — add_significance","text":"","code":"add_significance(   res,   fdr_col = \"FDR\",   logFC_col = \"logFC\",   fdr_threshold = 0.05,   fc_threshold = 1 )"},{"path":"/reference/add_significance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Significance Categories to Differential Expression Results — add_significance","text":"res data frame differential expression results, row names representing gene identifiers. fdr_col character string specifying name column contains FDR adjusted p-values. Default \"FDR\". logFC_col character string specifying name column contains log2 fold changes. Default \"logFC\". fdr_threshold Numeric, threshold statistical significance. Default 0.05. fc_threshold Numeric, threshold absolute log2 fold change. Default 1.","code":""},{"path":"/reference/add_significance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Significance Categories to Differential Expression Results — add_significance","text":"original data frame added column sign categorizes genes \"\", \"\", \"Significant\".","code":""},{"path":"/reference/add_significance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add Significance Categories to Differential Expression Results — add_significance","text":"Genes categorized follows: : genes logFC > fc_threshold FDR < fdr_threshold. : genes logFC < -fc_threshold FDR < fdr_threshold. Significant: genes.","code":""},{"path":"/reference/add_significance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Significance Categories to Differential Expression Results — add_significance","text":"","code":"if (FALSE) { # \\dontrun{ # Assume deg_df is your differential expression results data frame: deg_df <- add_significance(deg_df, fdr_col = \"adj.P.Val\", logFC_col = \"logFC\",                            fdr_threshold = 0.05, fc_threshold = 1) } # }"},{"path":"/reference/average_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Average Specified Column Groups in a Count Matrix — average_cols","title":"Average Specified Column Groups in a Count Matrix — average_cols","text":"function computes row-wise average specified groups columns count matrix. returns new data frame averaged values retains original row names (typically gene names).","code":""},{"path":"/reference/average_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Average Specified Column Groups in a Count Matrix — average_cols","text":"","code":"average_cols(tmm, pairs)"},{"path":"/reference/average_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Average Specified Column Groups in a Count Matrix — average_cols","text":"tmm numeric matrix data frame row names representing genes columns representing samples. pairs list element character vector column names tmm averaged together.","code":""},{"path":"/reference/average_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Average Specified Column Groups in a Count Matrix — average_cols","text":"data frame row names tmm one column per element pairs. column contains average corresponding columns tmm.","code":""},{"path":"/reference/average_cols.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Average Specified Column Groups in a Count Matrix — average_cols","text":"function loops group specified pairs, computes row-wise mean (ignoring NA values), assigns new column name concatenating first two elements pair using format \"col1_n_col2\". useful want simplify summarize data replicated samples prior visualization, heatmap.","code":""},{"path":"/reference/average_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Average Specified Column Groups in a Count Matrix — average_cols","text":"","code":"if (FALSE) { # \\dontrun{ # Assume tmm is your count matrix and you have defined column groups to average: pairs <- list(c(\"counts_RS1050_1_KIDNEY\", \"counts_RS1316_3_SPLEEN\"),               c(\"counts_RS1050_1_PB\", \"counts_RS1316_2_PB\"),               c(\"counts_RS1316_1_BM\", \"counts_RS9737_2_BM\")) averaged_tmm <- average_cols(tmm, pairs) } # }"},{"path":"/reference/build_go_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a Nested List of GO Analysis Results for Export — build_go_list","title":"Build a Nested List of GO Analysis Results for Export — build_go_list","text":"function creates nested list GO analysis results multiple comparisons combining -regulated -regulated results. expects two named lists: one -regulated GO results one -regulated GO results. comparison, extracts specified databases lists converts results data frames. output nested list top-level element corresponds comparison contains named list data frames, names indicating database regulation direction (e.g., \"MSigDB_Hallmarks_UP\").","code":""},{"path":"/reference/build_go_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a Nested List of GO Analysis Results for Export — build_go_list","text":"","code":"build_go_list(   up_list,   down_list,   databases = c(\"MSigDB_Hallmarks\", \"GO_Biological_Process_2023\", \"BioPlanet_2019\",     \"GO_Cellular_Component_2023\", \"Reactome_Pathways_2024\") )"},{"path":"/reference/build_go_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a Nested List of GO Analysis Results for Export — build_go_list","text":"up_list named list GO analysis results -regulated genes. element list one entry per database. database entry must contain $data element. down_list named list GO analysis results -regulated genes. element structure up_list. databases character vector database names extract result. Default : c(\"MSigDB_Hallmarks\", \"GO_Biological_Process_2023\", \"BioPlanet_2019\",   \"GO_Cellular_Component_2023\", \"Reactome_Pathways_2024\") continuity up_go() down_go() functions.","code":""},{"path":"/reference/build_go_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a Nested List of GO Analysis Results for Export — build_go_list","text":"named list data frames. element corresponds comparison list data frames. data frame named indicate source database whether corresponds - -regulated genes.","code":""},{"path":"/reference/build_go_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Build a Nested List of GO Analysis Results for Export — build_go_list","text":"comparison (names common up_list down_list), function performs following steps: Iterates specified databases -regulated results converts result (stored $data) data frame, naming suffix \"_UP\". Iterates specified databases -regulated results converts similarly, naming suffix \"_Down\". Combines single list comparison. nested list can processed exported (example, writexl::write_xlsx, top-level element becomes separate sheet).","code":""},{"path":"/reference/build_go_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a Nested List of GO Analysis Results for Export — build_go_list","text":"","code":"if (FALSE) { # \\dontrun{   # Assume you have two named lists, one for up-regulated and one for down-regulated GO results:   # Each result object (e.g., up_PB_vs_all) contains entries like up_PB_vs_all[[\"MSigDB_Hallmarks\"]]   # with a 'data' field.   up_list <- list(     PB_vs_all = list(       MSigDB_Hallmarks = up_PB_vs_all$MSigDB_Hallmarks,       GO_Biological_Process_2023 = up_PB_vs_all$GO_Biological_Process_2023,       BioPlanet_2019 = up_PB_vs_all$BioPlanet_2019,       GO_Cellular_Component_2023 = up_PB_vs_all$GO_Cellular_Component_2023,       Reactome_Pathways_2024 = up_PB_vs_all$Reactome_Pathways_2024     ),     PB_vs_KLS = list(       MSigDB_Hallmarks = up_PB_vs_OT$MSigDB_Hallmarks,       GO_Biological_Process_2023 = up_PB_vs_OT$GO_Biological_Process_2023,       BioPlanet_2019 = up_PB_vs_OT$BioPlanet_2019,       GO_Cellular_Component_2023 = up_PB_vs_OT$GO_Cellular_Component_2023,       Reactome_Pathways_2024 = up_PB_vs_OT$Reactome_Pathways_2024     )   )    down_list <- list(     PB_vs_all = list(       MSigDB_Hallmarks = down_PB_vs_all$MSigDB_Hallmarks,       GO_Biological_Process_2023 = down_PB_vs_all$GO_Biological_Process_2023,       BioPlanet_2019 = down_PB_vs_all$BioPlanet_2019,       GO_Cellular_Component_2023 = down_PB_vs_all$GO_Cellular_Component_2023,       Reactome_Pathways_2024 = down_PB_vs_all$Reactome_Pathways_2024     ),     PB_vs_KLS = list(       MSigDB_Hallmarks = down_PB_vs_OT$MSigDB_Hallmarks,       GO_Biological_Process_2023 = down_PB_vs_OT$GO_Biological_Process_2023,       BioPlanet_2019 = down_PB_vs_OT$BioPlanet_2019,       GO_Cellular_Component_2023 = down_PB_vs_OT$GO_Cellular_Component_2023,       Reactome_Pathways_2024 = down_PB_vs_OT$Reactome_Pathways_2024     )   )    # Build the nested GO list:   go_list <- build_go_list(up_list, down_list) } # }"},{"path":"/reference/create_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Consolidated Data Frame from Multiple Raw Count Files — create_df","title":"Create a Consolidated Data Frame from Multiple Raw Count Files — create_df","text":"function reads merges raw count data several separate files one data frame. processes file reading data, assigning descriptive column names based file name, appending count columns existing data. processing, columns count values retained, rows labels \"no_feature\" \"ambiguous\" (present) removed.","code":""},{"path":"/reference/create_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Consolidated Data Frame from Multiple Raw Count Files — create_df","text":"","code":"create_df(raw_counts, files)"},{"path":"/reference/create_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Consolidated Data Frame from Multiple Raw Count Files — create_df","text":"raw_counts data frame containing initial set raw counts. can empty data frame one pre-populated counts. serves base new count data appended. files character vector file paths raw count files. file expected format header contains two columns.","code":""},{"path":"/reference/create_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Consolidated Data Frame from Multiple Raw Count Files — create_df","text":"data frame consolidates count columns provided files, non-count columns extra rows (\"no_feature\" \"ambiguous\") removed.","code":""},{"path":"/reference/create_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Consolidated Data Frame from Multiple Raw Count Files — create_df","text":"function performs following steps: Loops file files reads data using read.delim header = FALSE. Assigns column names data based file's base name, creating names like genes_<filename> counts_<filename>. Sets row names data frame using first column, count data can merged matching gene names. Appends new data raw_counts using bind_cols. Retains columns whose names start \"counts\", effectively discarding gene identifier columns. Removes rows row name matches \"no_feature\" \"ambiguous\", present.","code":""},{"path":"/reference/create_df.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a Consolidated Data Frame from Multiple Raw Count Files — create_df","text":"running function, ensure defined paths raw count files file adheres expected format (.e., two columns header). Adjust filtering extra rows necessary based data.","code":""},{"path":"/reference/create_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Consolidated Data Frame from Multiple Raw Count Files — create_df","text":"","code":"if (FALSE) { # \\dontrun{ # Create an initial raw counts data frame (this can be empty or contain initial data) raw_counts <- data.frame(row.names = c(\"Gene1\", \"Gene2\", \"Gene3\"))  # Define a list of file paths to the raw count files (modify the path and pattern as needed) files <- list.files(path = \"path/to/counts\", pattern = \"*.txt\", full.names = TRUE)  # Consolidate the raw counts from all files into one data frame consolidated_counts <- create_df(raw_counts, files) } # }"},{"path":"/reference/deg_barplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Differentially Expressed Genes from a Count Matrix — deg_barplot","title":"Plot Differentially Expressed Genes from a Count Matrix — deg_barplot","text":"function creates bar plot expression levels top differentially expressed genes (DEGs) normalized count matrix (e.g., TMM TPM). function filters DEG data frame based specified adjusted p-value threshold log fold-change, selects plots top top_n genes. Gene names italicized.","code":""},{"path":"/reference/deg_barplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Differentially Expressed Genes from a Count Matrix — deg_barplot","text":"","code":"deg_barplot(   deg,   tmm,   title,   pval_col = \"adj.P.Val\",   logFC_col = \"logFC\",   top_n = 30,   direction = \"UP\" )"},{"path":"/reference/deg_barplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Differentially Expressed Genes from a Count Matrix — deg_barplot","text":"deg data frame containing differential expression results, including least log fold-change column adjusted p-value column. Row names correspond gene symbols. tmm normalized count matrix (e.g., TMM TPM) genes rows samples columns. title character string specifying title bar plot. pval_col character string specifying column name deg contains adjusted p-values. Default \"adj.P.Val\". logFC_col character string specifying column name deg contains log fold-changes. Default \"logFC\". top_n integer specifying number top DEGs include plot. Default 30. direction character string indicating whether visualize -regulated genes (\"\") -regulated genes (\"\"). Default \"\". -regulated genes, genes logFC > 1 selected; -regulated genes, genes logFC < -1 selected.","code":""},{"path":"/reference/deg_barplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Differentially Expressed Genes from a Count Matrix — deg_barplot","text":"ggplot2 object representing bar plot selected genes expression levels.","code":""},{"path":"/reference/deg_barplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Differentially Expressed Genes from a Count Matrix — deg_barplot","text":"function first filters deg data frame retain statistically significant genes (adjusted p-value 0.05). sorts genes log fold-change based specified direction (\"\" -regulated \"\" -regulated) selects top top_n genes. Next, corresponding rows extracted count matrix (tmm), data reshaped long format plotting ggplot2. Finally, horizontal bar plot created gene names displayed italics.","code":""},{"path":"/reference/deg_barplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Differentially Expressed Genes from a Count Matrix — deg_barplot","text":"","code":"if (FALSE) { # \\dontrun{ # Example usage with TMM-normalized data: # Assume deg_df is a DEG results data frame and tmm_avg is a TMM-normalized count matrix. plot_up <- deg_barplot(deg_df, tmm_avg, \"Top 30 UP Genes\", direction = \"UP\")  # For TPM-normalized data, the same function can be used: plot_down <- deg_barplot(deg_df, tpm_avg, \"Top 30 DOWN Genes\", direction = \"DOWN\") } # }"},{"path":"/reference/deg_in_pathway.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter TPM Data by Pathway and Differential Expression — deg_in_pathway","title":"Filter TPM Data by Pathway and Differential Expression — deg_in_pathway","text":"function filters TPM data matrix include genes belong specified pathway also identified differentially expressed. particularly useful conducting pathway-specific analyses.","code":""},{"path":"/reference/deg_in_pathway.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter TPM Data by Pathway and Differential Expression — deg_in_pathway","text":"","code":"deg_in_pathway(tpm, deg, pathway)"},{"path":"/reference/deg_in_pathway.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter TPM Data by Pathway and Differential Expression — deg_in_pathway","text":"tpm matrix data frame containing TPM (Transcripts Per Million) values, row names correspond gene names. deg data frame containing differential expression results. row names data frame correspond genes identified differentially expressed. pathway vector gene names representing pathway interest.","code":""},{"path":"/reference/deg_in_pathway.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter TPM Data by Pathway and Differential Expression — deg_in_pathway","text":"subset TPM data containing rows (genes) present provided pathway vector row names deg.","code":""},{"path":"/reference/deg_in_pathway.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter TPM Data by Pathway and Differential Expression — deg_in_pathway","text":"function designed pathway-specific analyses. intersects set genes specified pathway identified differentially expressed (deg). Ensure deg data frame formatted correctly gene names row names.","code":""},{"path":"/reference/deg_in_pathway.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter TPM Data by Pathway and Differential Expression — deg_in_pathway","text":"","code":"if (FALSE) { # \\dontrun{ # Create an example TPM matrix with gene names as row names tpm <- matrix(runif(100), nrow = 10,               dimnames = list(paste0(\"Gene\", 1:10), paste0(\"Sample\", 1:10)))  # Create an example differential expression results data frame deg <- data.frame(logFC = rnorm(10), p.value = runif(10)) rownames(deg) <- paste0(\"Gene\", sample(1:10))  # Define a pathway of interest (vector of gene names) pathway_genes <- c(\"Gene1\", \"Gene3\", \"Gene5\")  # Filter the TPM matrix for genes in the pathway that are also differentially expressed filtered_tpm <- deg_in_pathway(tpm, deg, pathway_genes) } # }"},{"path":"/reference/down_go.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform GO Analysis on Down-regulated Genes — down_go","title":"Perform GO Analysis on Down-regulated Genes — down_go","text":"function performs Gene Ontology (GO) analysis -regulated genes differential expression data frame. works similarly up_go() filters genes logFC <= -1. default, preset list databases used, can supply via databases parameter. Bar plots generated top 20 GO terms.","code":""},{"path":"/reference/down_go.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform GO Analysis on Down-regulated Genes — down_go","text":"","code":"down_go(   df,   samples,   databases = c(\"MSigDB_Hallmark_2020\", \"GO_Biological_Process_2023\", \"BioPlanet_2019\",     \"GO_Cellular_Component_2023\", \"Reactome_Pathways_2024\") )"},{"path":"/reference/down_go.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform GO Analysis on Down-regulated Genes — down_go","text":"df data frame differential expression results must contain columns logFC P.value. Row names represent gene symbols. samples character string indicating sample group, used plot titles. databases character vector specifying databases use GO analysis. Default : c(\"MSigDB_Hallmark_2020\", \"GO_Biological_Process_2023\", \"BioPlanet_2019\",   \"GO_Cellular_Component_2023\", \"Reactome_Pathways_2024\"). Importantly, 5 databases allowed time.","code":""},{"path":"/reference/down_go.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform GO Analysis on Down-regulated Genes — down_go","text":"named list ggplot2 objects, representing bar plot top 20 significant GO terms database.","code":""},{"path":"/reference/down_go.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform GO Analysis on Down-regulated Genes — down_go","text":"function filters input data frame include genes logFC <= -1 (-regulated), uses enrichR package perform GO analysis. database, terms P.value < 0.05 selected plotted. resulting plots display top 20 GO terms based p-value.","code":""},{"path":"/reference/down_go.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform GO Analysis on Down-regulated Genes — down_go","text":"","code":"if (FALSE) { # \\dontrun{   # Assume df is your differential expression data frame with gene symbols as row names   down_plots <- down_go(df, samples = \"SampleGroup2\") } # }"},{"path":"/reference/enrichPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Enrichment Plots from GO Data (from the enrichR package) — enrichPlot","title":"Generate Enrichment Plots from GO Data (from the enrichR package) — enrichPlot","text":"function generates list enrichment plots different databases contained input list. element list GO processed create plot using plotEnrich function.","code":""},{"path":"/reference/enrichPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Enrichment Plots from GO Data (from the enrichR package) — enrichPlot","text":"","code":"enrichPlot(GO)"},{"path":"/reference/enrichPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Enrichment Plots from GO Data (from the enrichR package) — enrichPlot","text":"GO named list element contains data (e.g., data frame) representing GO (Gene Ontology) enrichment results specific database.","code":""},{"path":"/reference/enrichPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Enrichment Plots from GO Data (from the enrichR package) — enrichPlot","text":"named list plots. plot corresponds one databases input GO list.","code":""},{"path":"/reference/enrichPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Enrichment Plots from GO Data (from the enrichR package) — enrichPlot","text":"function loops database GO list, converts corresponding element data frame (already one), generates plot using plotEnrich function.","code":""},{"path":"/reference/enrichPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Enrichment Plots from GO Data (from the enrichR package) — enrichPlot","text":"","code":"# Example usage with a hypothetical GO list: # GO <- list( #   KEGG = kegg_data, #   Reactome = reactome_data # ) # plots <- enrichPlot(GO)"},{"path":"/reference/hmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Customized Heatmap for Count Data — hmap","title":"Create a Customized Heatmap for Count Data — hmap","text":"function generates heatmap normalized count matrix (e.g., TMM TPM data), option restrict visualization set differentially expressed genes (DEGs). addition, allows full customization heatmap colors, top annotation, display row (gene names) column names.","code":""},{"path":"/reference/hmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Customized Heatmap for Count Data — hmap","text":"","code":"hmap(   tmm,   title,   deg = NULL,   heatmap_colors = c(\"#5a78b3\", \"#6381b8\", \"#93b2d3\", \"#c6dbea\", \"#e7f4f2\", \"#faf0ab\",     \"#f6e298\", \"#db7d54\", \"#c14536\", \"#b9332c\"),   top_annotation_df = NULL,   top_annotation_colors = NULL,   annotation_width = unit(c(1, 4), \"cm\"),   show_row_names = FALSE,   show_column_names = FALSE )"},{"path":"/reference/hmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Customized Heatmap for Count Data — hmap","text":"tmm numeric matrix data frame row names representing genes. title character string used heatmap's column title. deg optional character vector gene names. provided, rows (genes) present deg used. NULL (default), heatmap created using rows tmm. heatmap_colors character vector specifying color palette heatmap. Default blue--red gradient. top_annotation_df optional data frame top annotation (example, sample grouping information). provided, used annotate columns; NULL (default) global metadata$samples exists, used. top_annotation_colors optional named list colors annotation. NULL (default), annotation use default (random) colors. annotation_width unit object specifying annotation width. Default unit(c(1, 4), 'cm'). show_row_names Logical. Whether display row (gene) names heatmap. Default FALSE. show_column_names Logical. Whether display column names heatmap. Default FALSE.","code":""},{"path":"/reference/hmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Customized Heatmap for Count Data — hmap","text":"Heatmap object (ComplexHeatmap package) drawn returned.","code":""},{"path":"/reference/hmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Customized Heatmap for Count Data — hmap","text":"function performs following steps: Optionally subsets count matrix tmm include rows gene names deg (provided). Computes z-scores gene across samples. Creates top annotation top_annotation_df provided. top_annotation_colors also provided, used; otherwise, default colors applied. Draws heatmap using Heatmap function ComplexHeatmap package user-specified options displaying row column names.","code":""},{"path":"/reference/hmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Customized Heatmap for Count Data — hmap","text":"","code":"if (FALSE) { # \\dontrun{ # Example: Create a heatmap using all genes ht_all <- hmap(tmm_avg, title = \"Heatmap of All Genes\")  # Example: Create a heatmap using only a subset of DEGs, with custom annotation colors and showing column names: deg_genes <- rownames(res_PB_vs_all) custom_colors <- list(samples = c(\"NM_IgM\" = \"darkred\", \"NM_NT\" = \"darkorange\",                                    \"NWT_IgM\" = \"darkblue\", \"NWT_NT\" = \"lightblue\")) ht_deg <- hmap(tmm_avg, title = \"PB vs ALL - DEGs\", deg = deg_genes,                heatmap_colors = c(\"#4575b4\", \"#91bfdb\", \"#e0f3f8\", \"#fee090\", \"#fc8d59\", \"#d73027\"),                top_annotation_df = data.frame(samples = metadata$samples),                top_annotation_colors = custom_colors,                show_column_names = TRUE) } # }"},{"path":"/reference/pcafun.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform and Plot PCA with Customizable Aesthetics — pcafun","title":"Perform and Plot PCA with Customizable Aesthetics — pcafun","text":"function performs Principal Component Analysis (PCA) count matrix generates biplot using PCAtools. streamlines workflow—especially pathway-specific PCAs—performing analysis plotting one step.","code":""},{"path":"/reference/pcafun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform and Plot PCA with Customizable Aesthetics — pcafun","text":"","code":"pcafun(   counts,   metadata,   title,   colby = \"samples\",   shapekey = NULL,   showLoadings = TRUE )"},{"path":"/reference/pcafun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform and Plot PCA with Customizable Aesthetics — pcafun","text":"counts numeric matrix data frame containing count data (e.g., TMM TPM values) rows features (e.g., genes) columns samples. metadata data frame containing sample metadata. row names metadata correspond column names counts. title character string PCA plot title. colby character string specifying column name metadata used color samples PCA plot. Default \"samples\". shapekey optional character string specifying column name metadata used shape points PCA plot. Default NULL, meaning special grouping shape. showLoadings logical value indicating whether display loadings PCA biplot. Default TRUE.","code":""},{"path":"/reference/pcafun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform and Plot PCA with Customizable Aesthetics — pcafun","text":"ggplot object representing PCA biplot.","code":""},{"path":"/reference/pcafun.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform and Plot PCA with Customizable Aesthetics — pcafun","text":"function leverages PCAtools::pca compute principal components PCAtools::biplot create biplot. providing customizable parameters color shape aesthetics (via colby shapekey), along option toggle display loadings, function enables users quickly generate tailored PCA visualizations without manually calculating PCA plotting separately.","code":""},{"path":"/reference/pcafun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform and Plot PCA with Customizable Aesthetics — pcafun","text":"","code":"if (FALSE) { # \\dontrun{ # Assume counts is your count matrix and metadata contains corresponding sample information: pca_plot <- pcafun(counts, metadata, title = \"Pathway-Specific PCA\",                    colby = \"treatment\", shapekey = \"batch\", showLoadings = FALSE) } # }"},{"path":"/reference/prep_deg_export.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Differential Expression Results for Export — prep_deg_export","title":"Prepare Differential Expression Results for Export — prep_deg_export","text":"function takes list DEG result data frames adds row names new column named Genes. useful exporting DEG results file formats (XLSX, CSV, TXT) preserving gene identifiers necessary. used functions like writexl::write_xlsx, element list can saved separate sheet Excel workbook.","code":""},{"path":"/reference/prep_deg_export.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Differential Expression Results for Export — prep_deg_export","text":"","code":"prep_deg_export(res_list)"},{"path":"/reference/prep_deg_export.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Differential Expression Results for Export — prep_deg_export","text":"res_list named list data frames containing DEG results. data frame row names represent gene identifiers.","code":""},{"path":"/reference/prep_deg_export.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Differential Expression Results for Export — prep_deg_export","text":"named list data frames, data frame includes new column Genes containing original row names.","code":""},{"path":"/reference/prep_deg_export.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare Differential Expression Results for Export — prep_deg_export","text":"function iterates element res_list, converts row names new column named Genes, returns updated list. transformation helpful exporting results, ensuring gene identifiers lost.","code":""},{"path":"/reference/prep_deg_export.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare Differential Expression Results for Export — prep_deg_export","text":"","code":"if (FALSE) { # \\dontrun{ # Assume res_list is a list of DEG data frames obtained from an analysis: res_list <- list(   condition1 = data.frame(logFC = rnorm(50), p.value = runif(50), row.names = paste0(\"Gene\", 1:50)),   condition2 = data.frame(logFC = rnorm(50), p.value = runif(50), row.names = paste0(\"Gene\", 51:100)) )  # Prepare the results for export by adding the gene identifiers as a column res_deg <- prep_deg_exp(res_list)  # You can now export res_deg using writexl::write_xlsx(res_deg, \"DEG_results.xlsx\") } # }"},{"path":"/reference/prep_go_exp.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine and Prepare GO Analysis Results for Export — prep_go_exp","title":"Combine and Prepare GO Analysis Results for Export — prep_go_exp","text":"function takes nested list GO analysis results , category, combines contained data frames single data frame row-binding . new column Database added indicate source record. resulting list suitable export Excel workbook (using packages like writexl), element becomes separate sheet.","code":""},{"path":"/reference/prep_go_exp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine and Prepare GO Analysis Results for Export — prep_go_exp","text":"","code":"prep_go_exp(go_list)"},{"path":"/reference/prep_go_exp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine and Prepare GO Analysis Results for Export — prep_go_exp","text":"go_list named list GO analysis results. element go_list list data frames, corresponding different database comparison.","code":""},{"path":"/reference/prep_go_exp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine and Prepare GO Analysis Results for Export — prep_go_exp","text":"named list data frames. data frame contains additional column Database indicates source data.","code":""},{"path":"/reference/prep_go_exp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine and Prepare GO Analysis Results for Export — prep_go_exp","text":"category go_list, function assigns standardized names nested data frames, uses dplyr::bind_rows (within lapply loop) combine single data frame. approach avoids explicit loops improves efficiency verbose iterative methods.","code":""},{"path":"/reference/prep_go_exp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine and Prepare GO Analysis Results for Export — prep_go_exp","text":"","code":"if (FALSE) { # \\dontrun{   # Assume go_list is a nested list of GO results from various comparisons:   combined_go_list <- prep_go_exp(go_list)    # Export to an Excel file where each list element becomes a separate sheet:   writexl::write_xlsx(combined_go_list, \"GO_Analysis_Results.xlsx\") } # }"},{"path":"/reference/save_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Save GO Analysis Plots to Files — save_plot","title":"Save GO Analysis Plots to Files — save_plot","text":"function saves list ggplot2 objects files chosen format. file names constructed provided list_name names plot list.","code":""},{"path":"/reference/save_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save GO Analysis Plots to Files — save_plot","text":"","code":"save_plot(   plot_list,   list_name,   path = \"results/\",   device = \"svg\",   height = 7,   width = 15 )"},{"path":"/reference/save_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save GO Analysis Plots to Files — save_plot","text":"plot_list named list ggplot2 plot objects. list_name character string prefix file names. path character string specifying directory path plots saved. Default \"results/\". device character string specifying output device/format. Default \"svg\". possible values include \"png\", \"pdf\", etc. height numeric value specifying height saved plot (inches). Default 7. width numeric value specifying width saved plot (inches). Default 15.","code":""},{"path":"/reference/save_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save GO Analysis Plots to Files — save_plot","text":"None. Files written disk.","code":""},{"path":"/reference/save_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save GO Analysis Plots to Files — save_plot","text":"function iterates plot plot_list uses ggsave save plot specified format.","code":""},{"path":"/reference/save_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save GO Analysis Plots to Files — save_plot","text":"","code":"if (FALSE) { # \\dontrun{   # Assume up_plots is a list of ggplot objects from up_go()   save_plot(up_plots, list_name = \"up_GO\", device = \"png\") } # }"},{"path":"/reference/select_stat_sign.html","id":null,"dir":"Reference","previous_headings":"","what":"Select Statistically Significant Differentially Expressed Genes — select_stat_sign","title":"Select Statistically Significant Differentially Expressed Genes — select_stat_sign","text":"function processes list differential gene expression (DGE) results filters data frame retain genes statistically significant based specified significance column log fold-change (logFC) threshold. useful selecting differentially expressed genes multiple analyses.","code":""},{"path":"/reference/select_stat_sign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select Statistically Significant Differentially Expressed Genes — select_stat_sign","text":"","code":"select_stat_sign(dge_list, stat_sign, logFC_threshold = 1)"},{"path":"/reference/select_stat_sign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select Statistically Significant Differentially Expressed Genes — select_stat_sign","text":"dge_list named list data frames, containing DGE results. data frame expected numeric column significance (e.g., p-value) logFC column indicating log fold-change. stat_sign character string specifying name significance column (e.g., \"p.value\" \"adj.P.Val\") used determine statistical significance. logFC_threshold numeric value specifying threshold absolute log fold-change. genes logFC greater equal threshold (less equal negative threshold) retained. Default 1.","code":""},{"path":"/reference/select_stat_sign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select Statistically Significant Differentially Expressed Genes — select_stat_sign","text":"named list data frames, data frame contains statistically significant genes, skipping empty element","code":""},{"path":"/reference/select_stat_sign.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select Statistically Significant Differentially Expressed Genes — select_stat_sign","text":"function loops element dge_list (skipping empty elements) filters data frame based following criteria: value column specified stat_sign less 0.05. absolute value logFC greater equal logFC_threshold.","code":""},{"path":"/reference/select_stat_sign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select Statistically Significant Differentially Expressed Genes — select_stat_sign","text":"","code":"if (FALSE) { # \\dontrun{ # Example: Suppose you have a list of DGE results dge_list <- list(   condition1 = data.frame(p.value = runif(100), logFC = rnorm(100)),   condition2 = data.frame(p.value = runif(100), logFC = rnorm(100)), )  # Filter the list using \"p.value\" as the significance column and a logFC threshold of 1 filtered_list <- select_stat_sign(dge_list, stat_sign = \"p.value\", logFC_threshold = 1) } # }"},{"path":"/reference/up_go.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform GO Analysis on Up-regulated Genes — up_go","title":"Perform GO Analysis on Up-regulated Genes — up_go","text":"function performs Gene Ontology (GO) analysis -regulated genes differential expression data frame. default, uses preset list GO pathway databases. However, can supply database vector via databases parameter. function also creates bar plots top 20 GO terms (based p-value) database.","code":""},{"path":"/reference/up_go.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform GO Analysis on Up-regulated Genes — up_go","text":"","code":"up_go(   df,   samples,   databases = c(\"MSigDB_Hallmark_2020\", \"GO_Biological_Process_2023\", \"BioPlanet_2019\",     \"GO_Cellular_Component_2023\", \"Reactome_Pathways_2024\") )"},{"path":"/reference/up_go.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform GO Analysis on Up-regulated Genes — up_go","text":"df data frame differential expression results must contain least columns logFC P.value. Row names represent gene symbols. samples character string describes sample group, used plot titles. databases character vector specifying databases use GO analysis. Default : c(\"MSigDB_Hallmark_2020\", \"GO_Biological_Process_2023\", \"BioPlanet_2019\",   \"GO_Cellular_Component_2023\", \"Reactome_Pathways_2024\"). Importantly, 5 databases allowed time.","code":""},{"path":"/reference/up_go.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform GO Analysis on Up-regulated Genes — up_go","text":"named list ggplot2 objects, representing bar plot top 20 significant GO terms database.","code":""},{"path":"/reference/up_go.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform GO Analysis on Up-regulated Genes — up_go","text":"function filters input data frame retain genes logFC >= 1 (-regulated genes), extracts gene symbols, uses enrichR package perform GO analysis provided databases. database, terms P.value < 0.05 retained selected columns (columns 1, 3, 4, 9, corresponding \"Terms\", \"P.value\", \"Adj. P.value\", \"Genes\", respectively) used plotting. function returns list ggplot objects, one database.","code":""},{"path":"/reference/up_go.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform GO Analysis on Up-regulated Genes — up_go","text":"","code":"if (FALSE) { # \\dontrun{   # Assume df is your differential expression data frame with row names as gene symbols   up_plots <- up_go(df, samples = \"SampleGroup1\") } # }"},{"path":"/reference/volplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw a Volcano Plot for Differential Expression Results — volplot","title":"Draw a Volcano Plot for Differential Expression Results — volplot","text":"function creates volcano plot differential expression results data frame. uses ggplot2 ggrepel plot log2 fold changes versus -log10(p-value), coloring points significance category. also labels top top_n ‑ ‑regulated genes.","code":""},{"path":"/reference/volplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw a Volcano Plot for Differential Expression Results — volplot","text":"","code":"volplot(   res,   fdr_threshold = 0.05,   fc_threshold = 1,   colors = c(Up = \"#FF8F8F\", Down = \"#30B3A9\", `Not Significant` = \"grey\"),   top_n = 10 )"},{"path":"/reference/volplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw a Volcano Plot for Differential Expression Results — volplot","text":"res data frame differential expression results includes columns log fold change (logFC), p-values (PValue), significance category (sign). recommended run add_significance() first. fdr_threshold Numeric, FDR threshold used drawing horizontal reference line. Default 0.05. fc_threshold Numeric, log2 fold change threshold used drawing vertical reference lines. Default 1. colors named vector colors significance categories. Default c(\"\" = \"#FF8F8F\", \"\" = \"#30B3A9\", \"Significant\" = \"grey\"). top_n integer specifying number top ‑regulated top ‑regulated genes label plot. Default 10.","code":""},{"path":"/reference/volplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw a Volcano Plot for Differential Expression Results — volplot","text":"ggplot object representing volcano plot.","code":""},{"path":"/reference/volplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Draw a Volcano Plot for Differential Expression Results — volplot","text":"function identifies top top_n ‑regulated genes (highest logFC) top top_n ‑regulated genes (lowest logFC) p-values less threshold. genes labeled plot using geom_text_repel. x-axis displays log2 fold change y-axis shows -log10(p-value). Dashed lines indicate significance thresholds. Important: run add_significance() function prior one, essential labels logFC direction (\"\", \"\", \"Significant\")","code":""},{"path":"/reference/volplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw a Volcano Plot for Differential Expression Results — volplot","text":"","code":"if (FALSE) { # \\dontrun{ # Assume deg_df is your differential expression results data frame and has been processed with add_significance() volcano_plot <- volplot(deg_df, fdr_threshold = 0.05, fc_threshold = 1, top_n = 10) } # }"}]
